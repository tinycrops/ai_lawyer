"""
SQLAlchemy ORM models for the American Law Dataset database.
"""

from sqlalchemy import Column, Integer, String, Boolean, Float, Text, ForeignKey, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime

Base = declarative_base()

class State(Base):
    """Represents a US state in the database."""
    __tablename__ = 'states'
    
    state_code = Column(String, primary_key=True)
    state_name = Column(String, nullable=False)
    document_count = Column(Integer, default=0)
    processed_count = Column(Integer, default=0)
    last_updated = Column(DateTime, default=datetime.now)
    
    # Relationships
    places = relationship("Place", back_populates="state", cascade="all, delete-orphan")
    documents = relationship("Document", back_populates="state")
    
    def __repr__(self):
        return f"<State(code='{self.state_code}', name='{self.state_name}')>"


class Place(Base):
    """Represents a place (city, county, etc.) within a state."""
    __tablename__ = 'places'
    
    place_id = Column(String, primary_key=True)
    state_code = Column(String, ForeignKey('states.state_code'), nullable=False)
    place_name = Column(String, nullable=False)
    place_type = Column(String)
    document_count = Column(Integer, default=0)
    processed_count = Column(Integer, default=0)
    last_updated = Column(DateTime, default=datetime.now)
    
    # Relationships
    state = relationship("State", back_populates="places")
    documents = relationship("Document", back_populates="place")
    
    def __repr__(self):
        return f"<Place(id='{self.place_id}', name='{self.place_name}', state='{self.state_code}')>"


class Schema(Base):
    """Represents an HTML structure schema pattern."""
    __tablename__ = 'schemas'
    
    schema_id = Column(String, primary_key=True)  # Hash of schema signature
    signature = Column(Text)  # JSON representation of the schema structure
    document_count = Column(Integer, default=0)
    document_types = Column(String)  # JSON array of document types
    first_seen = Column(DateTime, default=datetime.now)
    last_seen = Column(DateTime, default=datetime.now)
    
    # Relationships
    documents = relationship("Document", back_populates="schema")
    methodologies = relationship("ParsingMethodology", back_populates="schema", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Schema(id='{self.schema_id[:8]}', documents={self.document_count})>"


class Document(Base):
    """Represents a legal document in the database."""
    __tablename__ = 'documents'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    document_id = Column(String, unique=True, nullable=False)
    state_code = Column(String, ForeignKey('states.state_code'))
    place_id = Column(String, ForeignKey('places.place_id'))
    document_type = Column(String)
    document_date = Column(String)
    html_path = Column(String)
    metadata_path = Column(String)
    schema_id = Column(String, ForeignKey('schemas.schema_id'))
    is_processed = Column(Boolean, default=False)
    processed_path = Column(String)
    processed_date = Column(DateTime)
    processing_time = Column(Float)
    processing_error = Column(Text)
    
    # Relationships
    state = relationship("State", back_populates="documents")
    place = relationship("Place", back_populates="documents")
    schema = relationship("Schema", back_populates="documents")
    
    def __repr__(self):
        return f"<Document(id='{self.document_id}', type='{self.document_type}', processed={self.is_processed})>"


class ParsingMethodology(Base):
    """
    Represents a parsing methodology generated by Gemini for a specific schema.
    Contains executable Python code to parse documents with that schema.
    """
    __tablename__ = 'parsing_methodologies'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    schema_id = Column(String, ForeignKey('schemas.schema_id'), nullable=False)
    methodology_code = Column(Text, nullable=False)  # Python code as string
    generated_at = Column(DateTime, default=datetime.now)
    model_used = Column(String)
    is_active = Column(Boolean, default=True)
    performance_stats = Column(Text)  # JSON with stats about methodology performance
    
    # Relationships
    schema = relationship("Schema", back_populates="methodologies")
    
    def __repr__(self):
        return f"<ParsingMethodology(schema_id='{self.schema_id[:8]}', generated='{self.generated_at}')>"


class ProcessingRun(Base):
    """Represents a batch processing run with statistics."""
    __tablename__ = 'processing_runs'
    
    run_id = Column(Integer, primary_key=True, autoincrement=True)
    start_time = Column(DateTime, default=datetime.now, nullable=False)
    end_time = Column(DateTime)
    status = Column(String)
    documents_processed = Column(Integer, default=0)
    errors_count = Column(Integer, default=0)
    model_name = Column(String)
    notes = Column(Text)
    
    def __repr__(self):
        return f"<ProcessingRun(id={self.run_id}, status='{self.status}', processed={self.documents_processed})>" 